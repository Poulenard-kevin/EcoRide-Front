console.log("detail.js charg√©");

function reserverTrajet(trajet) {
  let trajets = JSON.parse(localStorage.getItem('ecoride_trajets')) || [];

  // V√©rifier si d√©j√† r√©serv√©
  const existingIndex = trajets.findIndex(t => t.detailId === trajet.id && t.role === "passager");
  if (existingIndex !== -1) {
    alert("Vous avez d√©j√† r√©serv√© ce trajet !");
    return;
  }

  // Demander combien de places
  const maxPlaces = trajet.seats || 1;
  let placesReservees = parseInt(prompt(`Combien de places voulez-vous r√©server ? (max ${maxPlaces})`), 10);
  if (isNaN(placesReservees) || placesReservees < 1 || placesReservees > maxPlaces) {
    alert("Nombre de places invalide !");
    return;
  }

  // üíæ Sauver toutes les infos (mock complet)
  const trajetReserve = {
    id: crypto.randomUUID(),
    detailId: trajet.detailId || trajet.id,
    depart: trajet.from,
    arrivee: trajet.to,
    date: trajet.date,
    heureDepart: trajet.timeStart,
    heureArrivee: trajet.timeEnd,
    prix: parseInt(trajet.price.replace("‚Ç¨", ""), 10),
    placesReservees,
    role: "passager",
    status: "reserve",
  
    // üëá infos suppl√©mentaires
    type: trajet.type || "Economique",
    driver: trajet.driver || {},
    duration: trajet.duration || "",
    prefs: trajet.prefs || [],
    vehicle: trajet.vehicle || {},
    reviews: trajet.reviews || []
  };

  trajets.push(trajetReserve);
  localStorage.setItem("ecoride_trajets", JSON.stringify(trajets));

  alert("R√©servation effectu√©e !");
  window.location.href = "/espace-utilisateur?tab=trajets";
}

document.addEventListener('pageContentLoaded', () => {
  const params = new URLSearchParams(window.location.search);
  const id = params.get("id");

  if (!id) {
    document.getElementById('main-page').innerHTML = "<p>Trajet introuvable.</p>";
    return;
  }

  // ‚ë† V√©rifier dans localStorage
  const trajets = JSON.parse(localStorage.getItem("ecoride_trajets")) || [];
  const trajetReserve = trajets.find(t => t.detailId === id);

  if (trajetReserve) {
    console.log("‚úÖ Trajet r√©serv√© trouv√© :", trajetReserve);

    // Injection villes
    const fromEl = document.querySelector('.location-time:first-child .location');
    const toEl = document.querySelector('.location-time:last-child .location');
    if (fromEl) fromEl.textContent = trajetReserve.depart;
    if (toEl) toEl.textContent = trajetReserve.arrivee;

    // injection compl√®te (driver, prefs, v√©hicule, etc.)
    document.querySelector(".pseudo").textContent = trajetReserve.driver?.name || "Conducteur";
    document.querySelector(".profile-photo img").src = trajetReserve.driver?.photo || "/images/default.png";
    document.querySelector(".rating").textContent = trajetReserve.driver?.rating || "‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ";
    document.querySelector(".badge-date").textContent = trajetReserve.date;
    document.querySelector(".time-depart").textContent = trajetReserve.heureDepart;
    document.querySelector(".time-arrivee").textContent = trajetReserve.heureArrivee;

    const infoContainer = document.querySelector(".info");
    infoContainer.innerHTML = `
      <h3 class="info-item">Prix : ${trajetReserve.prix} ‚Ç¨</h3>
      <h3 class="info-item">Dur√©e : ${trajetReserve.duration || "?"}</h3>
      <h3 class="info-item">Places r√©serv√©es : ${trajetReserve.placesReservees}</h3>
    `;

    // Injection pr√©f√©rences
    const prefContainer = document.querySelector(".preferences");
    if (prefContainer) {
      prefContainer.innerHTML = "";
      trajetReserve.prefs.forEach(pref => {
        const prefEl = document.createElement("h3");
        prefEl.className = "pref-item";
        prefEl.textContent = pref;
        prefContainer.appendChild(prefEl);
      });
    }

    // Injection v√©hicule
    const vehicleInfo = document.querySelector(".vehicle-info");
    if (vehicleInfo && trajetReserve.vehicle) {
      vehicleInfo.innerHTML = "";
      if (trajetReserve.vehicle.model) {
        const modelEl = document.createElement("h3");
        modelEl.className = "vehicle-item";
        modelEl.textContent = trajetReserve.vehicle.model;
        vehicleInfo.appendChild(modelEl);
      }
      if (trajetReserve.vehicle.color) {
        const colorEl = document.createElement("h3");
        colorEl.className = "vehicle-item";
        colorEl.textContent = trajetReserve.vehicle.color;
        vehicleInfo.appendChild(colorEl);
      }
      if (trajetReserve.vehicle.type) {
        const typeEl = document.createElement("h3");
        typeEl.className = "vehicle-item";
        typeEl.textContent = trajetReserve.vehicle.type;
        vehicleInfo.appendChild(typeEl);
      }
    }

    // Injection avis
    const reviewContainer = document.querySelector(".driver-reviews");
    if (reviewContainer) {
      reviewContainer.innerHTML = "";
      trajetReserve.reviews.forEach(review => {
        const blockquote = document.createElement("blockquote");
        blockquote.className = "review";
        blockquote.textContent = `"${review}"`;
        reviewContainer.appendChild(blockquote);
      });
    }

    // Badge type (Economique, Hybride, etc.)
    const badgeTypeEl = document.querySelector('.badge-economique');
    if (badgeTypeEl && trajetReserve.type) {
      const typeText = trajetReserve.type.charAt(0).toUpperCase() + trajetReserve.type.slice(1);
      badgeTypeEl.textContent = typeText;
      badgeTypeEl.className = 'badge';
      badgeTypeEl.classList.add(`badge-${trajetReserve.type.toLowerCase()}`);
    }

    // bouton devient ANNULER
    const btnReserve = document.querySelector(".reserve-btn");
    if (btnReserve) {
      btnReserve.textContent = "Annuler";
      btnReserve.onclick = () => {
        const index = trajets.findIndex(t => t.detailId === trajetReserve.detailId);
        if (index !== -1) {
          trajets.splice(index, 1);
          localStorage.setItem("ecoride_trajets", JSON.stringify(trajets));
          alert("R√©servation annul√©e !");
          location.href = "/espace-utilisateur?tab=trajets";
        }
      };
    }

    return; // ‚úÖ termin√©
  }

  // Donn√©es mock compl√®tes avec tous trajets
  const tripsMock = [
    {
      id: 'trajet1',
      from: 'Paris',
      to: 'Lyon',
      date: 'Vendredi 16 septembre',
      timeStart: '16h00',
      timeEnd: '20h30',
      price: '30‚Ç¨',
      type: 'Economique',
      driver: { name: 'Jean', rating: '‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ', photo: 'images/profil4m.png' },
      duration: '4h30',
      seats: 2,
      prefs: ['Non-fumeur', 'Animaux accept√©s', 'Musique'],
      vehicle: { model: 'Peugeot 308', color: 'Bleu', type: '√âlectrique' },
      reviews: [
        "Super exp√©rience avec EcoRide ! Le conducteur √©tait tr√®s ponctuel et la voiture impeccable. Je recommande !",
        "Trajet agr√©able et efficace. Le chauffeur √©tait courtois et la conduite souple. Parfait pour mes d√©placements quotidiens.",
        "EcoRide, c'est l'assurance d'un trajet serein. Mon conducteur √©tait professionnel et tr√®s sympathique. √Ä refaire sans h√©siter."
      ]
    },
    {
      id: 'trajet2',
      from: 'Marseille',
      to: 'Nice',
      date: 'Samedi 17 septembre',
      timeStart: '10h00',
      timeEnd: '13h00',
      price: '25‚Ç¨',
      type: 'Hybride',
      driver: { name: 'Marie', rating: '‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ', photo: 'images/profil1.png' },
      duration: '3h00',
      seats: 3,
      prefs: ['Fumeur', 'Pas d\'animaux', 'Silence'],
      vehicle: { model: 'Renault Clio', color: 'Rouge', type: 'Hybride' },
      reviews: [
        "Marie est une conductrice tr√®s prudente et sympathique.",
        "Trajet agr√©able, voiture propre et confortable."
      ]
    },
    {
      id: 'trajet3',
      from: 'Lille',
      to: 'Bruxelles',
      date: 'Dimanche 18 septembre',
      timeStart: '09h30',
      timeEnd: '12h00',
      price: '20‚Ç¨',
      type: 'Thermique',
      driver: { name: 'Luc', rating: '‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ', photo: 'images/profil3m.png' },
      duration: '2h30',
      seats: 1,
      prefs: ['Non-fumeur', 'Animaux accept√©s', 'Musique'],
      vehicle: { model: 'Volkswagen Golf', color: 'Gris', type: 'Thermique' },
      reviews: [
        "Luc est ponctuel et la conduite est agr√©able.",
        "Bonne exp√©rience, je recommande."
      ]
    },
    {
      id: 'trajet4',
      from: 'Bordeaux',
      to: 'Toulouse',
      date: 'Lundi 19 septembre',
      timeStart: '14h00',
      timeEnd: '17h00',
      price: '35‚Ç¨',
      type: 'Electrique',
      driver: { name: 'Sophie', rating: '‚òÖ‚òÖ‚òÖ‚òÖ‚òÜ', photo: 'images/profil2w.png' },
      duration: '3h00',
      seats: 4,
      prefs: ['Non-fumeur', 'Pas d\'animaux', 'Musique'],
      vehicle: { model: 'Tesla Model 3', color: 'Blanc', type: '√âlectrique' },
      reviews: [
        "Sophie est tr√®s professionnelle et sympathique.",
        "Trajet tr√®s confortable et √©cologique."
      ]
    }
  ];

  const trip = tripsMock.find(t => t.id === id);
  if (!trip) {
    document.getElementById('main-page').innerHTML = '<p>Trajet non trouv√©.</p>';
    return;
  }

  console.log("‚úÖ Affichage trajet mock:", trip);

  // Mise √† jour du badge type
  const badgeTypeEl = document.querySelector('.badge-economique');
  if (badgeTypeEl && trip.type) {
    const typeText = trip.type.charAt(0).toUpperCase() + trip.type.slice(1);
    badgeTypeEl.textContent = typeText;
    badgeTypeEl.className = 'badge';
    badgeTypeEl.classList.add(`badge-${trip.type.toLowerCase()}`);
  }

  // S√©lecteurs
  const pseudoEl = document.querySelector('.pseudo');
  const ratingEl = document.querySelector('.rating');
  const photoEl = document.querySelector('.profile-photo img');
  const dateBadge = document.querySelector('.badge-date');
  const fromEl = document.querySelector('.location-time:first-child .location');
  const toEl = document.querySelector('.location-time:last-child .location');
  const timeDepartEl = document.querySelector('.time-depart');
  const timeArriveeEl = document.querySelector('.time-arrivee');
  const infoContainer = document.querySelector('.info');
  const prefContainer = document.querySelector('.preferences');
  const vehicleInfo = document.querySelector('.vehicle-info');
  const reviewContainer = document.querySelector('.driver-reviews');

  // Injection simple
  if (pseudoEl) pseudoEl.textContent = trip.driver.name;
  if (ratingEl) ratingEl.textContent = trip.driver.rating;
  if (photoEl) photoEl.src = trip.driver.photo;
  if (dateBadge) dateBadge.textContent = trip.date;
  if (fromEl) fromEl.textContent = trip.from;
  if (toEl) toEl.textContent = trip.to;
  if (timeDepartEl) timeDepartEl.textContent = trip.timeStart;
  if (timeArriveeEl) timeArriveeEl.textContent = trip.timeEnd;

  // Vider et remplir infos
  if (infoContainer) {
    infoContainer.innerHTML = '';
    const priceEl = document.createElement('h3');
    priceEl.className = 'info-item';
    priceEl.textContent = `Prix : ${trip.price}`;
    const durationEl = document.createElement('h3');
    durationEl.className = 'info-item';
    durationEl.textContent = `Dur√©e : ${trip.duration}`;
    const seatsEl = document.createElement('h3');
    seatsEl.className = 'info-item';
    seatsEl.textContent = `Place disponible : ${trip.seats}`;
    infoContainer.append(priceEl, durationEl, seatsEl);
  }

  // Vider et remplir pr√©f√©rences
  if (prefContainer) {
    prefContainer.innerHTML = '';
    trip.prefs.forEach(pref => {
      const prefEl = document.createElement('h3');
      prefEl.className = 'pref-item';
      prefEl.textContent = pref;
      prefContainer.appendChild(prefEl);
    });
  }

  // Vider et remplir v√©hicule
  if (vehicleInfo) {
    vehicleInfo.innerHTML = '';
    const modelEl = document.createElement('h3');
    modelEl.className = 'vehicle-item';
    modelEl.textContent = trip.vehicle.model;
    const colorEl = document.createElement('h3');
    colorEl.className = 'vehicle-item';
    colorEl.textContent = trip.vehicle.color;
    const typeEl = document.createElement('h3');
    typeEl.className = 'vehicle-item';
    typeEl.textContent = trip.vehicle.type;
    vehicleInfo.append(modelEl, colorEl, typeEl);
  }

  // Vider et remplir avis
  if (reviewContainer) {
    reviewContainer.innerHTML = '';
    trip.reviews.forEach(review => {
      const blockquote = document.createElement('blockquote');
      blockquote.className = 'review';
      blockquote.textContent = `"${review}"`;
      reviewContainer.appendChild(blockquote);
    });
  }

  // Bouton r√©server
  const btnReserve = document.querySelector('.reserve-btn');
  if (btnReserve) {
    const trajets = JSON.parse(localStorage.getItem("ecoride_trajets")) || [];
    const dejaReserve = trajets.some(t => t.detailId === trip.id);

    if (dejaReserve) {
      btnReserve.textContent = "Annuler";
      btnReserve.onclick = () => {
        const index = trajets.findIndex(t => t.detailId === trip.id && t.role === "passager");
        if (index !== -1) {
          trajets.splice(index, 1);
          localStorage.setItem("ecoride_trajets", JSON.stringify(trajets));
          alert("R√©servation annul√©e !");
          location.href = "/espace-utilisateur?tab=trajets";
        }
      };
    } else {
      btnReserve.textContent = "R√©server"; 
      btnReserve.onclick = () => reserverTrajet(trip);
    }
  }
});